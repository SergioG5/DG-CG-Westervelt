% -----------------------------------------------------------------------------
%                             Created by S. Gomez
%				Department of Mathematics and Applications
%					University of Milano-Bicocca, Italy
%									 (2025)
% -----------------------------------------------------------------------------
classdef FEM2D < handle

% ------------------------------------------------------------------------
%                          PROPERTIES SECTION
% ------------------------------------------------------------------------
properties ( Access = private )
	op1D_;
	op2D_;
	degX_;
    degT_;
	dim_;
	InitialCondition;
	BoundaryCondition;
end

% ------------------------------------------------------------------------
%                          METHODS SECTION
% ------------------------------------------------------------------------
methods


function fem = FEM2D(p, q, ICopt, BCopt)
	if p > 10
		error('Hmmm! in Ldg2D() approximation degree 1 <= p <= 7.');
	end
	fem.degX_ = p;
    fem.degT_ = q;
	fem.dim_ = (p + 1)*(p + 2)/2;
	fem.op2D_ = InteriorOperators2D(p, q);
	fem.InitialCondition = ICopt;
	fem.BoundaryCondition = BCopt;
end

	[M] = computeMassMatrix(fem, Th);
	[K, bD] = computeStiffnessMatrix(fem, Thx, Tht, pde, nStep, uhN_1);
	[bf] = getRHS(fem, Thx, Tht, pde, nStep, uhN_1);
	uhGlobal = applyDirichletCondition(fem, Thx, Tht, uh, Func, nStep);
	[uh] = getProjection(fem,Th,Func);
	[err2] = getErrorU(fem,Th,uh,Func);
	[DOF] = getDOF(fem, Th, kCell);

end

% ------------------------------------------------------------------------
%                          END OF CLASS DEFINITION
% ------------------------------------------------------------------------
end


function [op] = InteriorOperators2D(p, q)
% ------------------------------------------------------------------------
% op = BoundaryOperators2D(p) constructs a discrete interior operator structure
%                              for a polynomial degree p
%
% op: structure op has the following fields:
%      p_: maximum degree
%      d_: polynomial space dimension
%     np_: number of quadrature points
%     QW_: np_ x 1 array; quadrature weights
%     QX_: np_ x 2 array; quadrature points
%     PX_: d_ x np_ array; basis functions evaluated at quadrature points
%     M0_: d_ x d_ array; mass matrix
%     M1_: d_ x d_ array; mass matrix inverse
%     DX_: d_ x d_ array; x-differential operator
%     DY_: d_ x d_ array; y-differential operator
%
% ------------------------------------------------------------------------

	ZERO_TOL = 1.0e-15;
	op.BX_ = LBasis2D(p);
	op.BTq_ = Lagrange1D(q);
    op.BTqmo_ = Lagrange1D(q - 1);
	op.BTqm2_ = Lagrange1D(q - 2);
	if(q > 2)
		op.BTqm3_ = Lagrange1D(q - 3);
	end
	op.p_ = op.BX_.getDegree();
	op.d_ = op.BX_.getDimension();
	[op.QX2D_, op.QW2D_] = getQuadrature2D(p);
	[op.QX1D_, op.QW1D_] = getQuadrature1D(q);
	np1D = length(op.QW1D_);
	np2D = length(op.QW2D_);
	ONES1D = ones(np1D, 1);
	ONES2D = ones(np2D, 1);
	op.QXT_ = [kron(ONES1D, op.QX2D_), kron(op.QX1D_, ONES2D)];
	op.QW3D_ = kron(op.QW1D_, op.QW2D_);
	op.np_ = size(op.QW2D_, 1);
	op.PX_ = op.BX_.evalBasis(op.QX2D_);
	op.PTQ_ = op.BTq_.evalBasis(op.QX1D_);
	op.PTQmo_ = op.BTqmo_.evalBasis(op.QX1D_);
	op.PTQm2_ = op.BTqm2_.evalBasis(op.QX1D_);
	if(q > 2)
		op.PTQm3_ = op.BTqm3_.evalBasis(op.QX1D_);
	end
	op.PTBottomQ_ = op.BTq_.evalBasis(0.0);
    op.PTBottomQmo_ = op.BTqmo_.evalBasis(0.0);
	op.PTTopQ_ = op.BTq_.evalBasis(1.0);
    op.DPTBottomQ_ = op.BTq_.evalGradient(0.0);
    op.DPTBottomQmo_ = op.BTqmo_.evalGradient(0.0);
	op.DPTTopQ_ = op.BTq_.evalGradient(1.0);
	op.PTQ_PX_ = kron(op.PTQ_, op.PX_);
    op.PTQmo_PX_ = kron(op.PTQmo_, op.PX_);
	op.PTBottomQ_PX_ = kron(op.PTBottomQ_, op.PX_);
    op.PTBottomQmo_PX_ = kron(op.PTBottomQmo_, op.PX_);
	op.PTTopQ_PX_ = kron(op.PTTopQ_, op.PX_);
    op.DPTBottomQ_PX_ = kron(op.DPTBottomQ_, op.PX_);
	nPointsLinf = 100;
	pointsLinf = linspace(0, 1, nPointsLinf)';
	op.PTLinfQ_ = op.BTq_.evalBasis(pointsLinf);
	op.DPTLinfQ_ = op.BTq_.evalGradient(pointsLinf);
	op.DPTLinfQ_PX_ = cell(nPointsLinf, 1);
	for s = 1: nPointsLinf
		op.DPTLinfQ_PX_{s} = kron(op.DPTLinfQ_(:, s), op.PX_);
	end
	op.DPTBottomQ_PX_ = kron(op.DPTBottomQ_, op.PX_);
	op.DPTTopQ_PX_ = kron(op.DPTTopQ_, op.PX_);
	op.MX_ = op.PX_*diag(op.QW2D_)*op.PX_';
	op.MTqmo_q_ = op.PTQmo_*diag(op.QW1D_)*op.PTQ_';
    op.PTq_PTq_ = op.PTQ_*diag(op.QW1D_)*op.PTQ_';
    op.MT_MX_ = kron(op.PTq_PTq_, op.MX_);
	[op.DX_, op.DY_] = op.BX_.evalGradient(op.QX2D_);
	op.DTQ_ = op.BTq_.evalGradient(op.QX1D_);
    DTQmo = op.BTqmo_.evalGradient(op.QX1D_);
    D2TQ = op.BTq_.evalSecondDerivatives(op.QX1D_);
    op.D2TQ_PX_ = kron(D2TQ, op.PX_);
    op.DTQmo_PX_ = kron(DTQmo, op.PX_);
	op.PTQ_DX_ = kron(op.PTQ_, op.DX_);
	op.DTQ_DX_ = kron(op.DTQ_, op.DX_);
	op.PTQ_DY_ = kron(op.PTQ_, op.DY_);
	op.DTQ_DY_ = kron(op.DTQ_, op.DY_);
    op.PTQmo_DX_ = kron(op.PTQmo_, op.DX_);
	op.PTQmo_DY_ = kron(op.PTQmo_, op.DY_);
	op.DPTQ_PX_ = kron(op.DTQ_, op.PX_);
	op.PTLinfQ_DX_ = cell(nPointsLinf, 1);
	op.PTLinfQ_DY_ = cell(nPointsLinf, 1);
	for s = 1: nPointsLinf
		op.PTLinfQ_DX_{s} = kron(op.PTLinfQ_(:, s), op.DX_);
		op.PTLinfQ_DY_{s} = kron(op.PTLinfQ_(:, s), op.DY_);
	end
end

function [QX2D, QW2D] = getQuadrature2D(p)
% ------------------------------------------------------------------------
% [QX,QW] = getQuadrature2D returns a 2D quadrature exact of order 8 on the 
%           reference Simplex2D
%                                v1 = (0.0, 0.0)
%                                v2 = (1.0, 0.0)
%                                v3 = (0.0, 1.0)
%                            
% ------------------------------------------------------------------------
    % 1D Gaussâ€“Legendre quadrature points and weights on [0,1]
	N = p;
    [QX1D, QW1D] = lgwt(N, 0, 1);
	[U, V] = meshgrid(QX1D, QX1D);
    [WU, WV] = meshgrid(QW1D, QW1D);
	U = U(:); V = V(:);
    WU = WU(:); WV = WV(:);
	QX2D = zeros(N^2, 2);
	QX2D(:, 1) = U;
	QX2D(:, 2) = V.*(1 - U);
	QW2D = WU.*WV.*(1 - U);
%{
QW = [
1.003387331496350e-03
2.143055506450442e-03
2.873911642439678e-03
3.090113257366687e-03
2.818768086972336e-03
2.201923671765967e-03
1.446831722862301e-03
7.592063141351036e-04
2.806636840481095e-04
4.997485963508507e-05
2.249206041480534e-03
4.803900987217113e-03
6.442197570121585e-03
6.926837911101856e-03
6.318587061783893e-03
4.935860629243981e-03
3.243236734127945e-03
1.701846709521720e-03
6.291393502485017e-04
1.120242927980239e-04
3.297195863253445e-03
7.042219418948901e-03
9.443860094064272e-03
1.015431262619158e-02
9.262654793514123e-03
7.235664029083860e-03
4.754382900500857e-03
2.494801199641481e-03
9.222790730563103e-04
1.642206307406159e-04
4.052397889238682e-03
8.655195594217744e-03
1.160691699815765e-02
1.248009422541407e-02
1.138420776039228e-02
8.892947478639312e-03
5.843344475026472e-03
3.066219762122803e-03
1.133521308392808e-03
2.018343358971887e-04
4.447566886549514e-03
9.499205747707067e-03
1.273876383980470e-02
1.369708881878754e-02
1.249433714275102e-02
9.760141972942039e-03
6.413157371057717e-03
3.365221741210390e-03
1.244056475745835e-03
2.215161821322763e-04
4.447566886549508e-03
9.499205747707056e-03
1.273876383980469e-02
1.369708881878753e-02
1.249433714275101e-02
9.760141972942029e-03
6.413157371057709e-03
3.365221741210386e-03
1.244056475745833e-03
2.215161821322761e-04
4.052397889238685e-03
8.655195594217751e-03
1.160691699815765e-02
1.248009422541408e-02
1.138420776039229e-02
8.892947478639319e-03
5.843344475026477e-03
3.066219762122806e-03
1.133521308392809e-03
2.018343358971889e-04
3.297195863253444e-03
7.042219418948900e-03
9.443860094064270e-03
1.015431262619158e-02
9.262654793514121e-03
7.235664029083858e-03
4.754382900500856e-03
2.494801199641480e-03
9.222790730563100e-04
1.642206307406158e-04
2.249206041480537e-03
4.803900987217120e-03
6.442197570121595e-03
6.926837911101867e-03
6.318587061783904e-03
4.935860629243989e-03
3.243236734127950e-03
1.701846709521723e-03
6.291393502485026e-04
1.120242927980241e-04
1.003387331496351e-03
2.143055506450445e-03
2.873911642439682e-03
3.090113257366691e-03
2.818768086972339e-03
2.201923671765970e-03
1.446831722862302e-03
7.592063141351044e-04
2.806636840481098e-04
4.997485963508513e-05];

QX = [
1.289124978829319e-02 1.191761343241554e-02
1.224133371286310e-02 6.173207187714830e-02
1.112741153338473e-02 1.471114496430704e-01
9.639454462218549e-03 2.611596760084564e-01
7.897973946063203e-03 3.946398468857868e-01
6.044046902949167e-03 5.367387657156606e-01
4.227866974046285e-03 6.759444616766651e-01
2.596575424202719e-03 8.009789210368987e-01
1.282350768586594e-03 9.017109877901467e-01
3.917808471813444e-04 9.699709678385134e-01
6.666425533867165e-02 1.191761343241554e-02
6.330335768229978e-02 6.173207187714830e-02
5.754295478733833e-02 1.471114496430704e-01
4.984831293691944e-02 2.611596760084564e-01
4.084263050093642e-02 3.946398468857868e-01
3.125545564891719e-02 5.367387657156606e-01
2.186348167356980e-02 6.759444616766651e-01
1.342761717660334e-02 8.009789210368987e-01
6.631394199531454e-03 9.017109877901467e-01
2.026008250729603e-03 9.699709678385134e-01
1.583848794329160e-01 1.191761343241554e-02
1.503998600640424e-01 6.173207187714830e-02
1.367139542758736e-01 1.471114496430704e-01
1.184325692132688e-01 2.611596760084564e-01
9.703633641072711e-02 3.946398468857868e-01
7.425855954477155e-02 5.367387657156606e-01
5.194455246308496e-02 6.759444616766651e-01
3.190212681118728e-02 8.009789210368987e-01
1.575525842790966e-02 9.017109877901467e-01
4.813510192106726e-03 9.699709678385134e-01
2.799260156044795e-01 1.191761343241554e-02
2.658134648076081e-01 6.173207187714830e-02
2.416252904633329e-01 1.471114496430704e-01
2.093151652883239e-01 2.611596760084564e-01
1.714999254825687e-01 3.946398468857868e-01
1.312429745334383e-01 5.367387657156606e-01
9.180568028596389e-02 6.759444616766651e-01
5.638313000292999e-02 8.009789210368987e-01
2.784550351229477e-02 9.017109877901467e-01
8.507293966269626e-03 9.699709678385134e-01
4.204911372039714e-01 1.191761343241554e-02
3.992919552679488e-01 6.173207187714830e-02
3.629576655987701e-01 1.471114496430704e-01
3.144229795721642e-01 2.611596760084564e-01
2.576187802367578e-01 3.946398468857868e-01
1.971467621272219e-01 5.367387657156606e-01
1.379059921310559e-01 6.759444616766651e-01
8.469597369452928e-02 8.009789210368987e-01
4.182815024397697e-02 9.017109877901467e-01
1.277923992409355e-02 9.699709678385134e-01
5.675912493636132e-01 1.191761343241554e-02
5.389759728549030e-01 6.173207187714830e-02
4.899308847581597e-01 1.471114496430704e-01
4.244173444193796e-01 2.611596760084564e-01
3.477413728774554e-01 3.946398468857868e-01
2.661144721571175e-01 5.367387657156606e-01
1.861495461922791e-01 6.759444616766651e-01
1.143251052685720e-01 8.009789210368987e-01
5.646086196587636e-02 9.017109877901467e-01
1.724979223739301e-02 9.699709678385134e-01
7.081563709631049e-01 1.191761343241554e-02
6.724544633152435e-01 6.173207187714830e-02
6.112632598935966e-01 1.471114496430704e-01
5.295251587032196e-01 2.611596760084564e-01
4.338602276316444e-01 3.946398468857868e-01
3.320182597509010e-01 5.367387657156606e-01
2.322498580373710e-01 6.759444616766651e-01
1.426379489601713e-01 8.009789210368987e-01
7.044350869755853e-02 9.017109877901467e-01
2.152173819521693e-02 9.699709678385134e-01
8.296975071346685e-01 1.191761343241554e-02
7.878680680588092e-01 6.173207187714830e-02
7.161745960810560e-01 1.471114496430704e-01
6.204077547782748e-01 2.611596760084564e-01
5.083238167034860e-01 3.946398468857868e-01
3.890026747395678e-01 5.367387657156606e-01
2.721109858602499e-01 6.759444616766651e-01
1.671189521519140e-01 8.009789210368987e-01
8.253375378194365e-02 9.017109877901467e-01
2.521552196937983e-02 9.699709678385134e-01
9.214181312289128e-01 1.191761343241554e-02
8.749645704405518e-01 6.173207187714830e-02
7.953455955695913e-01 1.471114496430704e-01
6.889920110546242e-01 2.611596760084564e-01
5.645175226132767e-01 3.946398468857868e-01
4.320057786354222e-01 5.367387657156606e-01
3.021920566497651e-01 6.759444616766651e-01
1.855934617864979e-01 8.009789210368987e-01
9.165761801032185e-02 9.017109877901467e-01
2.800302391075695e-02 9.699709678385134e-01
9.751911367792915e-01 1.191761343241554e-02
9.260265944099887e-01 6.173207187714830e-02
8.417611388235451e-01 1.471114496430704e-01
7.292008695293252e-01 2.611596760084564e-01
5.974621791681500e-01 3.946398468857868e-01
4.572171873813903e-01 5.367387657156606e-01
3.198276713492886e-01 6.759444616766651e-01
1.964245035388986e-01 8.009789210368987e-01
9.700666144126673e-02 9.017109877901467e-01
2.963725131430522e-02 9.699709678385134e-01
];
%}
end


function [QX1D, QW1D] = getQuadrature1D(q)
% ------------------------------------------------------------------------
% [QX,QW] = getQuadrature1D returns a 1D quadrature on the reference 
%                           segment [0, 1]
% ------------------------------------------------------------------------
[QX1D, QW1D] = lgwt(q, 0, 1);

%{
QX = [
     6.003740989757311e-03
     3.136330379964702e-02
     7.589670829478640e-02
     1.377911343199150e-01
     2.145139136957306e-01
     3.029243264612183e-01
     3.994029530012828e-01
     5.000000000000000e-01
     6.005970469987172e-01
     6.970756735387817e-01
     7.854860863042694e-01
     8.622088656800850e-01
     9.241032917052137e-01
     9.686366962003530e-01
     9.939962590102427e-01
];


QW = [
     1.537662099805865e-02
     3.518302374405405e-02
     5.357961023358595e-02
     6.978533896307715e-02
     8.313460290849695e-02
     9.308050000778111e-02
     9.921574266355580e-02
     1.012891209627806e-01
     9.921574266355580e-02
     9.308050000778111e-02
     8.313460290849695e-02
     6.978533896307715e-02
     5.357961023358595e-02
     3.518302374405405e-02
     1.537662099805865e-02
];
%}
end